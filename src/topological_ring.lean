import algebra.pointwise
import topology.algebra.ring
import topology.continuous_function.basic

open_locale classical topological_space filter

variables {R : Type*} [ring R] [t : topological_space R] [tr : topological_ring R]
include t tr

local attribute [instance] set.has_mul set.has_add

structure is_topological_basis_at_zero (s : set (set R)) : Prop :=
(h_open : ‚àÄ U ‚àà s, is_open U)
(h_zero : ‚àÄ U ‚àà s, (0 : R) ‚àà U)
(h_nhds : ‚àÄ (U : set R), (0 : R) ‚àà U ‚Üí is_open U ‚Üí ‚àÉ V ‚àà s, V ‚äÜ U)

lemma is_open_add_constant (a : R) (U : set R) (hU : is_open U) : is_open ({a} + U) := 
begin
  rw [set.singleton_add, set.image_add_left],
  apply is_open.preimage _ hU,
  have h_incl : continuous (Œª (b : R), (-a, b)) := continuous.prod_mk 
    (continuous_map.const (-a)).continuous_to_fun continuous_map.id.continuous_to_fun,
  have h_comp :  (Œª (b : R), -a + b) = function.comp (Œª ( p : R √ó R), p.1 + p.2)
    (Œª (b : R), (-a, b)) := rfl,
  rw h_comp,
  exact continuous.comp has_continuous_add.continuous_add h_incl,
end

lemma is_topological_basis_from_basis_at_zero {B : set (set R)} 
  [hB : is_topological_basis_at_zero B] : 
  topological_space.is_topological_basis {U : set R | ‚àÉ r : R, ‚àÉ V ‚àà B, U = {r} + V  } :=   
begin
  apply topological_space.is_topological_basis_of_open_of_nhds,
  { intros U hU,
    rw set.mem_set_of_eq at hU,
    rcases hU with ‚ü®r, V, hV, hrV‚ü©,
    rw hrV,
    exact is_open_add_constant r V (hB.h_open V hV)},
  { intros r U hrU hU,
    set V := ({-r} + U) with hV,
    have hV_zero : (0 : R) ‚àà V,
    { rw [hV, set.singleton_add, set.image_add_left, set.mem_preimage, neg_neg, add_zero],
      exact hrU, },
    have hV_open : is_open V := is_open_add_constant (-r) U hU,
    rcases (hB.h_nhds V hV_zero hV_open) with ‚ü®W, hWB, hWV‚ü©,
    use ({r} + W),
    split,
    { rw set.mem_set_of_eq,
      use [r, W, hWB] },
    split,
    { simp only [set.image_add_left, set.mem_preimage, set.singleton_add, add_left_neg],
      exact hB.h_zero W hWB },
    { have : U = {r} + V,
      { rw [hV, set.singleton_add, set.singleton_add, set.image_add_left, set.image_add_left, 
          neg_neg],
        ext,
        rw [set.mem_preimage, set.mem_preimage, ‚Üê add_assoc,add_right_neg, zero_add] },
        rw this,
        intro x,
        repeat { rw [set.singleton_add, set.image_add_left, set.mem_preimage] },
        apply hWV }},
end

--set_option trace.class_instances true
--set_option pp.implicit true
lemma eq_of_eq_basis_at_zero {t‚ÇÅ t‚ÇÇ : topological_space R} {tr‚ÇÅ : @topological_ring R t‚ÇÅ _}
  {tr‚ÇÇ : @topological_ring R t‚ÇÇ _} (B : set (set R)) 
  (hB‚ÇÅ : @is_topological_basis_at_zero R _ t‚ÇÅ tr‚ÇÅ B) 
  (hB‚ÇÇ : @is_topological_basis_at_zero R _ t‚ÇÇ tr‚ÇÇ B) : t‚ÇÅ = t‚ÇÇ :=
begin
  let basis := {U : set R | ‚àÉ (r : R) (V : set R) (H : V ‚àà B), U = {r} + V},
  rw [@topological_space.is_topological_basis.eq_generate_from R t‚ÇÅ basis 
    (@is_topological_basis_from_basis_at_zero R _ t‚ÇÅ tr‚ÇÅ B hB‚ÇÅ),
    @topological_space.is_topological_basis.eq_generate_from R t‚ÇÇ basis 
    (@is_topological_basis_from_basis_at_zero R _ t‚ÇÇ tr‚ÇÇ B hB‚ÇÇ)],
end

lemma image_topological_basis_at_zero (R‚ÇÅ : Type*) [ring R‚ÇÅ] [t‚ÇÅ : topological_space R‚ÇÅ] [topological_ring R‚ÇÅ] (R‚ÇÇ : Type*) [ring R‚ÇÇ] [t‚ÇÇ : topological_space R‚ÇÇ] [topological_ring R‚ÇÇ] (f : ring_hom R‚ÇÅ R‚ÇÇ)
(h_cont : continuous f) (h_open : is_open_map f) :
  is_topological_basis_at_zero { U : set R‚ÇÇ | ‚àÉ (V : set R‚ÇÅ), is_open V ‚àß (0 : R‚ÇÅ) ‚àà V  ‚àß f '' V = U} := 
begin
  split,
  { intros U hU,
    rw set.mem_set_of_eq at hU,
    rcases hU with ‚ü®V, hV, -, hUV‚ü©,
    rw ‚Üê hUV,
    apply h_open,
    exact hV,
  },
  { intros U hU,
    rw set.mem_set_of_eq at hU,
    rcases hU with ‚ü®V, -, hV, hUV‚ü©,
    rw [‚Üê hUV, set.mem_image],
    use [0, hV],
    rw ring_hom.map_zero },
    { intros U hU_zero hU_open,
      use f '' (f‚Åª¬π' U), 
      rw set.mem_set_of_eq,
      use [f‚Åª¬π' U, continuous.is_open_preimage h_cont U hU_open],
      split,
      { rw [set.mem_preimage, ring_hom.map_zero],
        exact hU_zero },
      { refl },
      { intros x hx,
        rw set.mem_image at hx,
        rcases hx with ‚ü®y, hy, hyx‚ü©,
        rwa ‚Üê hyx }}
end



/- structure filter_basis_at_zero (Œ± : Type*) [add_group Œ±] [topological_space Œ±]
extends filter_basis Œ± :=
  (zero : ‚àÄ {U}, U ‚àà sets ‚Üí (0 : Œ±) ‚àà U)
  (is_open : ‚àÄ {U}, U ‚àà sets ‚Üí is_open U)

lemma topological_ring.to_filter_basis_at_zero [t : topological_space R] : filter_basis_at_zero R := 
{ sets := { U : set R | is_open U ‚àß (0 : R) ‚àà U },
  nonempty :=  ‚ü®set.univ, t.is_open_univ, set.mem_univ (0 : R)‚ü©,
  inter_sets := Œª U V ‚ü®hU_open, hU_zero‚ü© ‚ü®hV_open, hV_zero‚ü©,
    by use [U ‚à© V, t.is_open_inter U V hU_open hV_open, set.mem_inter hU_zero hV_zero],
    zero := Œª U ‚ü®hU_open, hU_zero‚ü© , hU_zero,
    is_open := Œª U ‚ü®hU_open, hU_zero‚ü©, hU_open }

lemma is_open_add_constant [t : topological_space R] [tr : topological_ring R] (a : R) (U : set R) (hU : is_open U) : is_open ({a} + U) := sorry -/

/- lemma is_topological_basis_from_filter_basis_at_zero [t : topological_space R] [tr : topological_ring R] : 
  topological_space.is_topological_basis {U : set R | ‚àÉ r : R, ‚àÉ V ‚àà (topological_ring.to_filter_basis_at_zero R).sets, U = {r} + V  } :=  -/
/- lemma is_topological_basis_from__basis_at_zero [t : topological_space R] [tr : topological_ring R] : 
  topological_space.is_topological_basis {U : set R | ‚àÉ r : R, ‚àÉ V ‚àà (ùìù (0 : R)), U = {r} + V  } := 
begin
  apply topological_space.is_topological_basis_of_open_of_nhds,
  { intros U hU,
    rw set.mem_set_of_eq at hU,
    rcases hU with ‚ü®r, V, hV, hrV‚ü©,
    rw hrV,
    exact is_open_add_constant R r V (B.is_open hV)},
  { intros r U hrU hU,
    use U,
    split,
    { rw set.mem_set_of_eq,
      use [r, ({-r} + U)],
      split,
      {  },
      rw [set.singleton_add, set.singleton_add, set.image_add_left, set.image_add_left, neg_neg],
      ext,
      rw [set.mem_preimage, set.mem_preimage, ‚Üê add_assoc,add_right_neg, zero_add] },
    use hrU,
    }
end -/

/- is_topological_basis_of_open_of_nhds {s : set (set Œ±)}
  (h_open : ‚àÄ u ‚àà s, is_open u)
  (h_nhds : ‚àÄ(a:Œ±) (u : set Œ±), a ‚àà u ‚Üí is_open u ‚Üí ‚àÉv ‚àà s, a ‚àà v ‚àß v ‚äÜ u) :
  is_topological_basis s -/